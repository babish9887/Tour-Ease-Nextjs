generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User{
      id String @id @default(auto()) @map("_id") @db.ObjectId
      name String
      email String @unique
      password String?
      createdAt               DateTime          @default(now())
      updatedAt               DateTime          @updatedAt
      isActive Boolean? @default(true)
      emailVerified Boolean? @default(false)
      role String?

      reviews Review[]
      ratings Rating[]
      image String?
      account Account[]

       verifyToken String?
      verifyTokenExpiry DateTime?

      forgotPasswordToken String?
      forgotPasswordTokenExpiry DateTime?



      //for guide
      description String?
      isVerified Boolean?     
      languages String[]
      locations Float[]
      contactNo String?
      nationality String?
      status String?

}

model Booking{

      id String @id @default(auto()) @map("_id") @db.ObjectId
      bookedUser String @db.ObjectId
      bookedBy String @db.ObjectId
      bookingDate DateTime
      endDate DateTime
      createdAt               DateTime          @default(now())
      payment String?
}

model canceledBooking{
      id String @id @default(auto()) @map("_id") @db.ObjectId
      bookedUser String @db.ObjectId
      bookedBy String @db.ObjectId
      bookingDate DateTime
      endDate DateTime
      createdAt               DateTime          @default(now())
      payment String?
      reason String?
}

model Account{
      id String @id @default(auto()) @map("_id") @db.ObjectId
      userId String @db.ObjectId
      type String
      provider String
      providerAccountId String
      refresh_token String? @db.String
      access_token String? @db.String
      expires_at Int?
      token_type String?
      scope String?
      id_token String? @db.String
      session_state String?

      user User @relation(fields: [userId], references: [id], onDelete: Cascade)

      @@unique([provider, providerAccountId])
}



model Review{
      id String @id @default(auto()) @map("_id") @db.ObjectId
      userId String @db.ObjectId
      user User @relation(fields: [userId], references: [id], onDelete:Cascade)
      tourId String @db.ObjectId
      tour Tour @relation(fields: [tourId], references: [id], onDelete:Cascade)
      guideId String? @db.ObjectId
      review String
       createdAt               DateTime          @default(now())
}

model Rating{
      id String @id @default(auto()) @map("_id") @db.ObjectId
      userId String @db.ObjectId
      user User @relation(fields: [userId], references: [id], onDelete:Cascade)
      tourId String @db.ObjectId
      tour Tour @relation(fields: [tourId], references: [id], onDelete:Cascade)
      rating Int
       createdAt               DateTime          @default(now())
}


model RequestCancel{
      id String @id @default(auto()) @map("_id") @db.ObjectId
      bookingId String @db.ObjectId
      reason String
}


model Tour{
      id String @id @default(auto()) @map("_id") @db.ObjectId
      name String
      duraton Int
      description String
      difficulty String
      ratings Rating[]
      averageRating Int?
      reviews Review[]
      averageReview Int?
      images String[]
      coverImage String
      locations Location[]
}

model Location{
      id String @id @default(auto()) @map("_id") @db.ObjectId
      name String
      coordinates String[]
      image String[]
      tourId String @db.ObjectId
      tour Tour @relation(fields: [tourId], references: [id], onDelete: Cascade)
      // userId String @db.ObjectId
      // user User @relation(fields: [userId], references: [id], onDelete: Cascade)

}

